#include<stdio.h>
#include<pthread.h>
#include<time.h>

int i,j,player;
int r,flag=0;
char enter;

void display();
char box[6][7];

int limit=0;

void *add();

void *referee();

 struct
 {
   pthread_mutex_t m1;
   pthread_cond_t c1;
   int lable;
 }s1={PTHREAD_MUTEX_INITIALIZER,PTHREAD_COND_INITIALIZER,0};

struct
{
pthread_mutex_t m2;
 pthread_cond_t c2;
}s2={PTHREAD_MUTEX_INITIALIZER,PTHREAD_COND_INITIALIZER};




main()


      {

        for(i=0;i<6;i++)
          {
            for(j=0;j<7;j++)
              {
                box[i][j]='o';
              }
          }


        pthread_t mon,p1, p2;

        pthread_create(&mon,NULL,referee,NULL);
        pthread_create(&p1,NULL,add,NULL);
        pthread_create(&p2,NULL,add,NULL);


        pthread_join(mon,NULL);
        pthread_join(p1,NULL);
        pthread_join(p2,NULL);


      }


        void *referee()
        {


          pthread_mutex_lock(&s1.m1);


                    printf("\n\n GAME STARTED\n\n");
                    display();
                   
                  for(;;)
            {
              
             for(i=0;i<3;i++)
                {
                  for(j=0;j<7;j++)
                    {
                      if(box[i][j]!='o'&&box[i][j]==box[i+1][j] && box[i][j]==box[i+2][j] && box[i][j]==box[i+3][j])
                        {
                          printf("\n  Player %c has won the game  \n",box[i][j]);
                          display();
                          flag=1;
                          pthread_mutex_unlock(&s1.m1);
                          pthread_exit(NULL);

                        }
                    }
                }

              for(i=0;i<3;i++)
                {
                  for(j=0;j<4;j++)
                    {
                      if(box[i][j]!='o'&&box[i][j]==box[i+1][j+1] && box[i][j]==box[i+2][j+2] && box[i][j]==box[i+3][j+3])
                        {
                          printf("\n\n  Player %c has won the game \n\n",box[i][j]);
                          display();
                          flag=1;
                          pthread_mutex_unlock(&s1.m1);
                          pthread_exit(NULL);

                        }
                    }
                }

              for(i=5;i>2;i--)
                {
                  for(j=0;j<4;j++)
                    {
                      if(box[i][j]!='o'&&box[i][j]==box[i-1][j+1] && box[i][j]==box[i-2][j+2] && box[i][j]==box[i-3][j+3])
                        {
                          printf("\n\n  Player %c has won the game \n\n",box[i][j]);
                          display();
                          flag=1;
                          pthread_mutex_unlock(&s1.m1);
                          pthread_exit(NULL);
                        }
                    }
                }


              if(limit==42)
                {
                     printf("Neither of the players won the game");
                     pthread_mutex_unlock(&s1.m1);
                     pthread_exit(NULL);
                }





          if(s1.lable==0)

              pthread_cond_signal(&s1.c1);
              s1.lable++;
              pthread_mutex_unlock(&s1.m1);

         
              pthread_mutex_lock(&s2.m2);

              pthread_cond_wait(&s2.c2,&s2.m2);
              pthread_mutex_unlock(&s2.m2);


            }
        }







        void *add()

        {
          for(;;)
            {
          pthread_mutex_lock(&s1.m1);

          if(flag==1)
            {
              pthread_mutex_unlock(&s1.m1);
              pthread_exit(NULL);
            }

          while(s1.lable==0)
            {
              pthread_cond_wait(&s1.c1,&s1.m1);
            }

          s1.lable--;
	 time_t time;
	 srand(time(&time));
	 r=rand()%7;

          player=pthread_self()%2;
          if(player!=0)
            {
               enter='pInK';
            }
          else
            {
               enter='bLuE';
            }

         
          

          for(i=5;i>=0;i--)
            {
          if(box[i][r]=='o')
            {
              printf("\n\nThe player %c is playing\n\n",enter);
              box[i][r]=enter;
              limit++;
              display();
              sleep(1);
              break;
            }
            }



          pthread_mutex_unlock(&s1.m1);

          pthread_mutex_lock(&s2.m2);
          pthread_cond_signal(&s2.c2);
          pthread_mutex_unlock(&s2.m2);
          sleep(1);
            }
        }





        void display()
        {

          for(i=0;i<6;i++)
            {
              printf("\n");
              for(j=0;j<7;j++)
                {
                  printf("%3c   ",box[i][j]);
                }
                  printf("\n");         
            }
          printf("\n\n");
        }
